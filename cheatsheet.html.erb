<%
def c(code, linkys={})
  code.gsub!(" ","&nbsp;")
  code.gsub!(/\b(def)&nbsp;/){"<span class='hl1'>#{$1}</span>&nbsp;"}
  code.gsub!(/(\[bad.?\])/) { "<span class=bad>#{$1}</span>" }
  code.gsub!(/(\[good.?\])/) { "<span class=good>#{$1}</span>" }
  code.gsub!("\n","<br>")
  linkys.each_pair do |text, link|
    code.gsub!(text) { "<a href='#{link}'>" + text + "</a>" }
  end
  "<span class='cod'>" + code + "</span>"
end
def cmp(s)
  " &nbsp; <span style='font-size:90%'><i>#{s}</i></span>"
end
%>
<head>
<style>
body { color: #292929;}
.cod { color: #116; }
.cod a { text-decoration: none }
.cod a:hover { text-decoration: underline }
td a { text-decoration: none;}
td a:hover { text-decoration: underline;}
.bad { font-size:80%; color: #522;}
.good { font-size:80%; color: #252;}
/*.hl1 { color: #248;}*/
.subheader { padding-top:0.5em; font-weight: bold; }
td { vertical-align: top; padding-left:4px; padding-right:2px;
  border-width: 1px 0 0 0;
  border-style: solid;
  border-color: gray white gray white;}
ol { margin-top:0; margin-bottom:0;}
</style>
<title>cheat sheet for scala syntax</title>
<body>
<b>Cheat sheet for scala syntax</b>
&nbsp;
<b><a href=http://anyall.org/scalacheat/>anyall.org/scalacheat</a></b>
by <a href=http://anyall.org/>brendan</a>
<br>Most should work in the interactive interpreter.  Language coverage is still pretty incomplete.
<br>
Source on <a href=http://github.com/brendano/scalacheat>github</a>,
pull requests welcome!

<table style="margin-top:5px" cellspacing=0>
<!-- <tr>
  <th>scala</th>
  <th>explanation -->

  <%############################################################%>

<tr><td class=subheader colspan=2>variables
<tr>
  <td><%=c"var x = 5"%>
  <td>variable
</tr>
<tr>
  <td><%=c"val x = 5"%> <br><%=c"[bad!] x = 6"%>
  <td>constant
</tr>
<tr>
  <td><%=c"var x: Double = 5"%>
  <td>explicit type
</tr>


    <%############################################################%>

<tr><td class=subheader colspan=2>functions
<tr>
  <td><%=c"[good] def f(x: Int) = { x*x }"%><br>
      <%=c"[bad!] def f(x: Int)   { x*x }"%>
  <td>define function <br>hidden error: without = it's a <%=c"Unit"%>-returning procedure; causes havoc
<tr>
  <td><%=c"[good] def f(x: Any) = println(x)"%><br>
      <%=c"[bad!] def f(x) = println(x)"%>
  <td>define function <br>syntax error: need types for every arg.

<tr>
  <td><%=c"type R = Double"%> <td>type alias
<tr>
  <td><%=c "def f(x: R)" %>  <%=cmp "vs"%><br>
      <%=c "def f(x: => R)" %>
  <td>call-by-value <%=cmp "vs"%><br>call-by-name (<a href=http://scala.sygneca.com/faqs/language#what-s-the-difference-between-a-lazy-argument-a-no-arg-function-argument-and-a-lazy-value>lazy parameters</a>)

<tr>
  <td><%=c "(x:R) => x*x" %>
  <td>anonymous function
<tr>
  <td><%=c"(1 to 5).map( _*2 )"%><br>
      <%=c"(1 to 5).reduceLeft( _+_ )"%>
  <td>anonymous function: underscore is positionally matched arg.
<tr>
  <td><%=c"(1 to 5).map( x => x*x )"%>
  <td>anonymous function: to use an arg twice, have to name it.
<tr>
  <td><%=c"[good] (1 to 5).map(2*)"%><br>
      <%=c"[bad!] (1 to 5).map(*2)"%>
  <td>anonymous function: bound infix method.  Use <%=c"2*_"%> for sanity's sake instead.
<tr>
  <td><%=c"(1 to 5).map { val x=_*2; println(x); x }"%>
  <td>anonymous function: block style returns last expression
    <!--     examples:  <a href=http://lampsvn.epfl.ch/svn-repos/scala/scala/trunk/src/library/scala/concurrent/ops.scala>scala.concurrency.ops</a>, <a href=http://lampsvn.epfl.ch/svn-repos/scala/scala/trunk/src/library/scala/util/control/Breaks.scala>scala.util.control.Breaks</a> -->
<tr>
  <td><%=c"(1 to 5) filter {_%2 == 0} map {_*2}"%>
  <td>anonymous functions: pipeline style.  (or parens too)
<tr>
  <td>
    <%=c"def compose(g:R=>R, h:R=>R) = (x:R) => g(h(x))"%><br>
    <%=c"val f = compose({_*2}, {_-1})"%>
  <td>anonymous functions: to pass in multiple blocks, need outer parens
    
<tr>
  <td><%=c"val zscore = (mean:R, sd:R) => (x:R) => (x-mean)/sd"%>
  <td>currying, obvious syntax
<tr>
  <td><%=c"def zscore(mean:R, sd:R) = (x:R) => (x-mean)/sd"%>
  <td>currying, obvious syntax
<tr>
  <td><%=c"def zscore(mean:R, sd:R)(x:R) = (x-mean)/sd"%>
  <td>currying, sugar syntax.  but then:
<tr>
  <td><%=c"val normer = zscore(7, 0.4)_"%>
  <td>need trailing underscore to get the partial, only for the sugar version.

<tr>
  <td><%=c"def mapmake[T](g:T=>T)(seq: List[T]) = seq.map(g)"%>
  <td>generic type
<tr>
  <td><%=c"5.+(3); 5 + 3"%><br><%=c"(1 to 5) map (_*2)"%>
  <td>infix sugar

<tr>
  <td><%=c"def sum(args: Int*) = args.reduceLeft(_+_)"%>
  <td>varargs

<tr>
  <td><%=c"val n = sum(args:_*) "%>
  <td>pass seq to function accepting varargs

<tr>
  <td>
    <%=c"def foo(bar: Int = 42, baz: Int = 7) = { ... }"%><br>
    <%=c"foo()"%><br>
    <%=c"foo(baz = 13)"%>
  <td>default args
<tr>
  <td>
    <%=c"def foo(bar: Int, baz: Int) = { ... }"%><br>
    <%=c"foo(bar = 42, baz = 13)"%>
  <td>named args

    <%############################################################%>

<tr><td class=subheader colspan=2>packages
<tr>
  <td><%=c"import scala.collection._"%>
  <td>wildcard import
<tr>
  <td>
    <%=c"import scala.collection.Vector"%><br>
    <%=c"import scala.collection.{Vector, Sequence}"%>
  <td>selective import
<tr>
  <td><%=c"import scala.collection.{Vector => Vec28}"%>
  <td>renaming import
<tr>
  <td><%=c"package pkg"%> <i>at start of file</i><br>
      <%=c"package pkg { ... }"%>
  <td>declare a package

    <%############################################################%>

<tr><td class=subheader colspan=2>data structures
<tr>
  <td><%=c"(1,2,3)"%>
  <td>tuple literal (Tuple3)
<tr>
  <td><%=c"var (x,y,z) = (1,2,3)"%>
  <td>destructuring bind: tuple unpacking via pattern matching
<tr>
  <td><%=c"[bad!] var x,y,z = (1,2,3)"%>
  <td>hidden error: each assigned to the entire tuple
<tr>
  <td><%=c"var xs = List(1,2,3)"%><br>

  <td>list (immutable)
<tr><td><%=c"xs(2)"%> <td>paren indexing (<a href=http://www.slideshare.net/Odersky/fosdem-2009-1013261/27>slides</a>)
<tr>
  <td><%=c"1 :: List(2,3)"%>
  <td>cons
<tr>
  <td><%=c"1 to 5"%> <%=cmp"same as"%> &nbsp; <%=c"1 until 6"%><br>
      <%=c"1 to 10 by 2"%>
  <td>range sugar
<tr><td><%=c"()"%> <%=cmp "(empty parens)"%> <td>sole member of the <%=c"Unit"%> type (like C/Java void)
  
  <%############################################################%>
  
<tr><td class=subheader colspan=2>control constructs
<tr>
  <td><%=c"if (check) happy else sad"%>
  <td>conditional
</tr>
<tr>
  <td><%=c"if (check) happy"%> <%=cmp "same as"%><br><%=c"if (check) happy else ()"%>
  <td>conditional sugar
</tr>
<tr><td><%=c"var x = 0"%>
<tr><td><%=c"while (x < 5) { println(x); x += 1}"%> <td>while loop
<tr><td><%=c"do { println(x); x += 1} while (x < 5)"%> <td>do while loop
<tr><td><%=c(
"import scala.util.control.Breaks._
breakable { 
    for (x <- xs) {
        if (Math.random < 0.1) break
    } 
}",  "scala.util.control.Breaks._" => "http://lampsvn.epfl.ch/svn-repos/scala/scala/trunk/src/library/scala/util/control/Breaks.scala")%> <td>break
    (<a href="http://www.slideshare.net/Odersky/fosdem-2009-1013261/21">slides</a>)
  <!-- TODO this example breaks on <%=c'continue'%> -->
<tr>
  <td>
    <%=c"val xs = List.range(1,11)"%><br><%=c"val ys = List.range(1,11)"%>
<tr><td>  
    <%=c"for (x <- xs if x%2 == 0) yield x*10"%> <%=cmp "same as"%><br>
    <%=c"xs.filter(_%2 == 0).map(_*10)"%>
  <td>for comprehension: filter/map
<tr>
  <td>
    <%=c"for ((x,y) <- xs zip ys) yield x*y"%> <%=cmp "same as"%><br>
    <%=c"(xs zip ys) map { case (x,y) => x*y }"%>     
  <td>for comprehension: destructuring bind
<tr>
  <td>
    <%=c"for (x <- xs; y <- ys) yield x*y"%> <%=cmp "same as"%><br>
    <%=c"xs flatMap {x => ys map {y => x*y}}"%>
  <td>for comprehension: cross product
<tr>
  <td>
    <%=c(
%|for (x <- xs; y <- ys) {
    println("%d/%d = %.1f".format(x,y, x*y))    
}|,  "format" => "http://java.sun.com/javase/6/docs/api/java/lang/String.html#format(java.lang.String,%20java.lang.Object...)")%>
  <td>
    for comprehension: imperative-ish<br>
    <a href="http://java.sun.com/javase/6/docs/api/java/util/Formatter.html#syntax">sprintf-style</a>
      


    <%############################################################%>

<tr><td class=subheader colspan=2>pattern matching
    
<tr>
  <td>
    <%=c"[good] (xs zip ys) map { case (x,y) => x*y }"%><br>
    <%=c"[bad!] (xs zip ys) map( (x,y) => x*y )"%>
  <td>
    use <%=c"case"%> in function args for pattern matching
</tr>
<tr><td> <td>TODO <a href=http://www.codecommit.com/blog/scala/case-classes-are-cool>case classes</a>, match...

    <%############################################################%>

<tr><td class=subheader colspan=2>object orientation
<tr>
  <td><%=c"class C(x: R)"%> <%=cmp"same as"%><br><%=c"class C(private val x: R)"%><br><%=c"var c = new C(4)"%>
  <td>constructor params - private
<tr>
  <td><%=c %|\
class C(val x: R)
var c = new C(4)
c.x
| %>
  <td>constructor params - public
<tr>
  <td><%=c %|\
class C(var x: R) {
  assert(x > 0, "positive please")
  var y = x
  val readonly = 5
  private var secret = 1
  def this = this(42)
}|%>
  <td>
    <br>
    constructor is class body<br>
    declare a public member<br>
    declare a gettable but not settable member<br>
    declare a private member
    <br>
    alternative constructor
<tr>
  <td><%=c"new { ... }"%>
  <td>anonymous class (TODO extension syntax)
<tr>
  <td><%=c"abstract class D { ... }"%>
  <td>define an abstract class. (non-createable)
<tr>
  <td><%=c"class C extends D { ... }"%>
  <td>define an inherited class.
<tr>
  <td>
    <%=c"class D(var x: R)"%><br>
    <%=c"class C(x: R) extends D(x)"%>
  <td>inheritance and constructor params.  (wishlist: automatically pass-up params by default)
<tr>
  <td><%=c"object O extends D { ... }"%>
  <td>define a singleton. (module-like)
<tr>
  <td><%=c"trait T { ... }"%><br>
      <%=c"class C extends T { ... }"%><br>
      <%=c"class C extends D with T { ... }"%>
  <td>traits.<br>interfaces-with-implementation.  no constructor params.  <a href="http://www.scala-lang.org/node/117">mixin-able</a>.
<tr>
  <td>
    <%=c"trait T1; trait T2"%><br>
    <%=c"class C extends T1 with T2"%><br>
    <%=c"class C extends D with T1 with T2"%>
  <td>multiple traits
<tr>
  <td><%=c"class C extends D { override def f = ...}"%>
  <td>must declare method overrides
<tr>
  <td><%=c'new java.io.File("f")'%>
  <td>create object
<tr>
  <td><%=c"[bad!] new List[Int]"%><br><%=c"[good] List(1,2,3)"%>
  <td>type error: abstract type<br>
      instead, convention: callable factory shadowing the type
<!-- <tr>
  <td><%=c"class C { class D }"%><br><%=c"C#D"%> <td>TODO doesn't work (should refer to inner class) -->
<tr>
  <td>TODO
  <td>self types

<tr>
  <td><%=c"classOf[String]"%> <td>class literal
<tr>
  <td><%=c"x.isInstanceOf[String]"%> <td>type check  (runtime)
<tr>
  <td><%=c"x.asInstanceOf[String]"%> <td>type cast   (runtime)

    <%############################################################%>

<tr><td class=subheader colspan=2>more

<tr>
  <td>implicit
  <td>TODO conversions
<tr>
  <td>TODO
  <td>try/catch
<tr>
  <td><%=c"<s>hi {name}</s>".gsub('<','&lt;').gsub('>','&gt;')%> <td>xml literal with expression interpolation
<tr>
  <td>TODO <%=c"Option"%>
  <td>guarded type-safe nulls (like <a href="http://www.haskell.org/all_about_monads/html/maybemonad.html">Maybe</a> or 
    <a href="http://andand.rubyforge.org/">andand</a>)
<tr>
  <td>TODO <td>unapply


    <%############################################################%>

<tr>
  <td colspan=2 class=subheader>advanced generics
<tr><td>TODO tricky esoteric stuff

</table>

<hr>
designed for scala 2.8 and 2.9.
portions adapted from A. Sundararajan's java vs. scala cheat sheet: 
<a href=http://blogs.sun.com/sundararajan/entry/scala_for_java_programmers>(1)</a>
<a href=http://blogs.sun.com/sundararajan/entry/scala_for_java_programmers_part>(2)</a>
<br>
also check out: <a href=http://www.slideshare.net/Odersky/fosdem-2009-1013261>slides: fosdem-2009 (odersky)</a>, <a href=http://www.scala-lang.org/docu/files/ScalaByExample.pdf>book: scala by example (odersky)</a>
<br>
Copyright Brendan O'Connor, licensed <a href=http://creativecommons.org/licenses/by-sa/3.0/>CC BY-SA</a>.

 <hr>
 
<div id="disqus_thread"></div><script type="text/javascript" src="http://disqus.com/forums/anyall/embed.js"></script><noscript><a href="http://anyall.disqus.com/?url=ref">View the discussion thread.</a></noscript><a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>
